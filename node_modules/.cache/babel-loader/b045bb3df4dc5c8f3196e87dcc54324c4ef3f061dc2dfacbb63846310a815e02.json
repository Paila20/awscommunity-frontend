{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WIN-10\\\\OneDrive\\\\Documents\\\\Desktop\\\\expense-frontend\\\\expensetracker\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import { useNavigate } from 'react-router-dom';\n// // import { ToastContainer } from 'react-toastify';\n// // import BlogForm from './BlogForm';\n// // import BlogCard from './BlogCard';\n// // import { handleSuccess, handleError } from '../utils';\n\n// // function Home() {\n// //     const [loggedInUser, setLoggedInUser] = useState('');\n// //     const [blogs, setBlogs] = useState([]);\n// //     const [showBlogForm, setShowBlogForm] = useState(false);\n// //     const [editingBlog, setEditingBlog] = useState(null);\n// //     const navigate = useNavigate();\n\n// //     useEffect(() => {\n// //         setLoggedInUser(localStorage.getItem('loggedInUser'));\n// //         fetchBlogs();\n// //     }, []);\n\n// //     const fetchBlogs = async () => {\n\n// //         try {\n// //             const response = await fetch(`http://localhost:8080/api/blogs`, {\n\n// //                 headers: { Authorization: localStorage.getItem('token') },\n// //             });\n// //             const result = await response.json();\n// //             console.log(result);\n// //             if (!result.success) throw new Error(result.message);\n\n// //             setBlogs(result);\n// //         } catch (err) {\n// //             if (err.message === \"Unauthorized\") {\n// //                 localStorage.removeItem('token');\n// //                 navigate('/login');\n// //             } else {\n// //                 handleError(err.message);\n// //             }\n// //         }\n// //     };\n\n// //     const addOrUpdateBlog = async (formData) => {\n\n// //         try {\n// //             const url = editingBlog\n// //                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\n// //                 : `http://localhost:8080/api/blogs/create`;\n// //             const method = editingBlog ? 'PUT' : 'POST';\n// //             const response = await fetch(url, {\n// //                 method,\n// //                 headers: {\n// //                     Authorization: localStorage.getItem('token'),\n// //                     // 'Content-Type': 'application/json',\n// //                 },\n// //                 body: formData,\n// //             });\n\n// //             const result = await response.json();\n// //              console.log(result)\n\n// //             if (!result.success) throw new Error(result.message);\n\n// //             handleSuccess(result.message);\n// //             setShowBlogForm(false);\n// //             setEditingBlog(null);\n\n// //             // Update blogs locally\n// //             if (editingBlog) {\n// //                 setBlogs((prevBlogs) =>\n// //                     prevBlogs.map((blog) => (blog._id === result.blog._id ? result.blog : blog))\n// //                 );\n// //             } else {\n// //                 console.log(result.blog)\n// //                 setBlogs((prevBlogs) => [...prevBlogs, result.blog]);\n// //             }\n// //         } catch (err) {\n// //             handleError(err.message);\n// //         }\n// //     };\n\n// //     const deleteBlog = async (id) => {\n// //         try {\n// //             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n// //                 method: 'DELETE',\n// //                 headers: { Authorization: localStorage.getItem('token') },\n// //             });\n\n// //             const result = await response.json();\n\n// //             if (!result.success) throw new Error(result.message);\n\n// //             handleSuccess(result.message);\n\n// //             // Remove the blog locally\n// //             setBlogs((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id));\n// //         } catch (err) {\n// //             handleError(err.message);\n// //         }\n// //     };\n\n// //     const handleLogout = () => {\n// //         localStorage.removeItem('token');\n// //         localStorage.removeItem('loggedInUser');\n// //         handleSuccess('User Logged out');\n// //         navigate('/login');\n// //     };\n\n// //     return (\n// //         <div>\n// //             <div className=\"user-section\">\n// //                 <h1>Welcome, {loggedInUser}</h1>\n// //                 <button onClick={handleLogout}>Logout</button>\n// //                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\n// //             </div>\n\n// //             <div className=\"blog-grid\">\n// //                 {blogs.map((blog) => (\n// //                     <BlogCard\n// //                         key={blog._id}\n// //                         blog={blog}\n// //                         onEdit={() => {\n// //                             setEditingBlog(blog);\n// //                             setShowBlogForm(true);\n// //                         }}\n// //                         onDelete={() => deleteBlog(blog._id)}\n// //                     />\n// //                 ))}\n// //             </div>\n\n// //             {showBlogForm && (\n// //                 <BlogForm\n// //                     onClose={() => {\n// //                         setShowBlogForm(false);\n// //                         setEditingBlog(null);\n// //                     }}\n// //                     onSubmit={addOrUpdateBlog}\n// //                     blog={editingBlog}\n// //                 />\n// //             )}\n// //             <ToastContainer />\n// //         </div>\n// //     );\n// // }\n\n// // export default Home;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { ToastContainer } from 'react-toastify';\n// import BlogForm from './BlogForm';\n// import BlogCard from './BlogCard';\n// import { handleSuccess, handleError } from '../utils';\n\n// function Home() {\n//     const [loggedInUser, setLoggedInUser] = useState('');\n//     const [blogs, setBlogs] = useState([]);\n//     const [showBlogForm, setShowBlogForm] = useState(false);\n//     const [editingBlog, setEditingBlog] = useState(null);\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         setLoggedInUser(localStorage.getItem('loggedInUser'));\n//         fetchBlogs();\n//     }, []);\n\n//     const fetchBlogs = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/blogs`, {\n//                 headers: { Authorization: localStorage.getItem('token') },\n//             });\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             setBlogs(result);\n//         } catch (err) {\n//             if (err.message === 'Unauthorized') {\n//                 localStorage.removeItem('token');\n//                 navigate('/login');\n//             } else {\n//                 handleError(err.message);\n//             }\n//         }\n//     };\n\n//     const addOrUpdateBlog = async (formData) => {\n//         try {\n//             const url = editingBlog\n//                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\n//                 : `http://localhost:8080/api/blogs/create`;\n//             const method = editingBlog ? 'PUT' : 'POST';\n\n//             const response = await fetch(url, {\n//                 method,\n//                 headers: {\n//                     Authorization: localStorage.getItem('token'),\n//                 },\n//                 body: formData,\n//             });\n\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\n\n//             // Update blogs directly with API response\n//             setBlogs(result);\n\n//             // Reset form state\n//             setShowBlogForm(false);\n//             setEditingBlog(null);\n//         } catch (err) {\n//             handleError(err.message);\n//         }\n//     };\n\n//     const deleteBlog = async (id) => {\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n//                 method: 'DELETE',\n//                 headers: { Authorization: localStorage.getItem('token') },\n//             });\n\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             handleSuccess('Blog deleted successfully!');\n\n//             // Update blogs directly with API response\n//             setBlogs(result);\n//         } catch (err) {\n//             handleError(err.message);\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('loggedInUser');\n//         handleSuccess('User Logged out');\n//         navigate('/login');\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"user-section\">\n//                 <h1>Welcome, {loggedInUser}</h1>\n//                 <button onClick={handleLogout}>Logout</button>\n//                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\n//             </div>\n\n//             <div className=\"blog-grid\">\n//                 {blogs.map((blog) => (\n//                     <BlogCard\n//                         key={blog._id}\n//                         blog={blog}\n//                         onEdit={() => {\n//                             setEditingBlog(blog);\n//                             setShowBlogForm(true);\n//                         }}\n//                         onDelete={() => deleteBlog(blog._id)}\n//                     />\n//                 ))}\n//             </div>\n\n//             {showBlogForm && (\n//                 <BlogForm\n//                     onClose={() => {\n//                         setShowBlogForm(false);\n//                         setEditingBlog(null);\n//                     }}\n//                     onSubmit={addOrUpdateBlog}\n//                     blog={editingBlog}\n//                 />\n//             )}\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default Home;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport BlogForm from './BlogForm';\nimport BlogCard from './BlogCard';\nimport { handleSuccess, handleError } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [loggedInUser, setLoggedInUser] = useState('');\n  const [blogs, setBlogs] = useState([]);\n  const [showBlogForm, setShowBlogForm] = useState(false);\n  const [editingBlog, setEditingBlog] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setLoggedInUser(localStorage.getItem('loggedInUser'));\n    fetchBlogs();\n  }, []);\n\n  // const fetchBlogs = async () => {\n  //     try {\n  //         const response = await fetch(`http://localhost:8080/api/blogs`, {\n  //             headers: { Authorization: localStorage.getItem('token') },\n  //         });\n  //         const result = await response.json();\n  //         console.log(result);\n\n  //         if (!result.success || !Array.isArray(result.blogs)) {\n  //             throw new Error('Invalid response format: Expected an array of blogs');\n  //         }\n\n  //         setBlogs(result.blogs);\n  //     } catch (err) {\n  //         if (err.message === 'Unauthorized') {\n  //             localStorage.removeItem('token');\n  //             navigate('/login');\n  //         } else {\n  //             handleError(err.message);\n  //         }\n  //     }\n  // };\n\n  // const addOrUpdateBlog = async (formData) => {\n  //     try {\n  //         const url = editingBlog\n  //             ? `http://localhost:8080/api/blogs/${editingBlog._id}`\n  //             : `http://localhost:8080/api/blogs/create`;\n  //         const method = editingBlog ? 'PUT' : 'POST';\n\n  //         const response = await fetch(url, {\n  //             method,\n  //             headers: {\n  //                 Authorization: localStorage.getItem('token'),\n  //             },\n  //             body: formData,\n  //         });\n\n  //         const result = await response.json();\n  //         console.log(result);\n\n  //         if (!result.success || !Array.isArray(result.blogs)) {\n  //             throw new Error('Invalid response format: Expected an array of blogs');\n  //         }\n\n  //         handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\n\n  //         // Update blogs directly with API response\n  //         setBlogs(result.blogs);\n\n  //         // Reset form state\n  //         setShowBlogForm(false);\n  //         setEditingBlog(null);\n  //     } catch (err) {\n  //         handleError(err.message);\n  //     }\n  // };\n\n  // const deleteBlog = async (id) => {\n  //     try {\n  //         const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n  //             method: 'DELETE',\n  //             headers: { Authorization: localStorage.getItem('token') },\n  //         });\n\n  //         const result = await response.json();\n  //         console.log(result);\n\n  //         if (!result.success || !Array.isArray(result.blogs)) {\n  //             throw new Error('Invalid response format: Expected an array of blogs');\n  //         }\n\n  //         handleSuccess('Blog deleted successfully!');\n\n  //         // Update blogs directly with API response\n  //         setBlogs(result.blogs);\n  //     } catch (err) {\n  //         handleError(err.message);\n  //     }\n  // };\n\n  const fetchBlogs = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/blogs`, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      });\n      const result = await response.json();\n      console.log(result);\n\n      // Since the API directly returns an array, set it directly to blogs\n      if (!Array.isArray(result)) {\n        throw new Error('Invalid response format: Expected an array of blogs');\n      }\n      setBlogs(result);\n    } catch (err) {\n      if (err.message === 'Unauthorized') {\n        localStorage.removeItem('token');\n        navigate('/login');\n      } else {\n        handleError(err.message);\n      }\n    }\n  };\n  const addOrUpdateBlog = async formData => {\n    try {\n      const url = editingBlog ? `http://localhost:8080/api/blogs/${editingBlog._id}` : `http://localhost:8080/api/blogs/create`;\n      const method = editingBlog ? 'PUT' : 'POST';\n      const response = await fetch(url, {\n        method,\n        headers: {\n          Authorization: localStorage.getItem('token')\n        },\n        body: formData\n      });\n      const result = await response.json();\n      console.log(result);\n\n      // Directly update the blogs list with the new response\n      if (!Array.isArray(result)) {\n        throw new Error('Invalid response format: Expected an array of blogs');\n      }\n      handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\n      setBlogs(result);\n\n      // Reset form state\n      setShowBlogForm(false);\n      setEditingBlog(null);\n    } catch (err) {\n      handleError(err.message);\n    }\n  };\n  const deleteBlog = async id => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      });\n      const result = await response.json();\n      console.log(result);\n\n      // Directly update the blogs list with the new response\n      if (!Array.isArray(result)) {\n        throw new Error('Invalid response format: Expected an array of blogs');\n      }\n      handleSuccess('Blog deleted successfully!');\n      setBlogs(result);\n    } catch (err) {\n      handleError(err.message);\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('loggedInUser');\n    handleSuccess('User Logged out');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", loggedInUser]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowBlogForm(true),\n        children: \"Create Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog-grid\",\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(BlogCard, {\n        blog: blog,\n        onEdit: () => {\n          setEditingBlog(blog);\n          setShowBlogForm(true);\n        },\n        onDelete: () => deleteBlog(blog._id)\n      }, blog._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }, this), showBlogForm && /*#__PURE__*/_jsxDEV(BlogForm, {\n      onClose: () => {\n        setShowBlogForm(false);\n        setEditingBlog(null);\n      },\n      onSubmit: addOrUpdateBlog,\n      blog: editingBlog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"ydQkjZXhz3qBFY0hxtvhDu+TKdo=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","ToastContainer","BlogForm","BlogCard","handleSuccess","handleError","jsxDEV","_jsxDEV","Home","_s","loggedInUser","setLoggedInUser","blogs","setBlogs","showBlogForm","setShowBlogForm","editingBlog","setEditingBlog","navigate","localStorage","getItem","fetchBlogs","response","fetch","headers","Authorization","result","json","console","log","Array","isArray","Error","err","message","removeItem","addOrUpdateBlog","formData","url","_id","method","body","deleteBlog","id","handleLogout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","blog","onEdit","onDelete","onClose","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/WIN-10/OneDrive/Documents/Desktop/expense-frontend/expensetracker/src/pages/Home.js"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\r\n// // import { useNavigate } from 'react-router-dom';\r\n// // import { ToastContainer } from 'react-toastify';\r\n// // import BlogForm from './BlogForm';\r\n// // import BlogCard from './BlogCard';\r\n// // import { handleSuccess, handleError } from '../utils';\r\n\r\n// // function Home() {\r\n// //     const [loggedInUser, setLoggedInUser] = useState('');\r\n// //     const [blogs, setBlogs] = useState([]);\r\n// //     const [showBlogForm, setShowBlogForm] = useState(false);\r\n// //     const [editingBlog, setEditingBlog] = useState(null);\r\n// //     const navigate = useNavigate();\r\n\r\n// //     useEffect(() => {\r\n// //         setLoggedInUser(localStorage.getItem('loggedInUser'));\r\n// //         fetchBlogs();\r\n// //     }, []);\r\n\r\n// //     const fetchBlogs = async () => {\r\n       \r\n// //         try {\r\n// //             const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n             \r\n// //                 headers: { Authorization: localStorage.getItem('token') },\r\n// //             });\r\n// //             const result = await response.json();\r\n// //             console.log(result);\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n        \r\n// //             setBlogs(result);\r\n// //         } catch (err) {\r\n// //             if (err.message === \"Unauthorized\") {\r\n// //                 localStorage.removeItem('token');\r\n// //                 navigate('/login');\r\n// //             } else {\r\n// //                 handleError(err.message);\r\n// //             }\r\n// //         }\r\n// //     };\r\n  \r\n// //     const addOrUpdateBlog = async (formData) => {\r\n       \r\n// //         try {\r\n// //             const url = editingBlog\r\n// //                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n// //                 : `http://localhost:8080/api/blogs/create`;\r\n// //             const method = editingBlog ? 'PUT' : 'POST';\r\n// //             const response = await fetch(url, {\r\n// //                 method,\r\n// //                 headers: {\r\n// //                     Authorization: localStorage.getItem('token'),\r\n// //                     // 'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: formData,\r\n// //             });\r\n           \r\n// //             const result = await response.json();\r\n// //              console.log(result)\r\n\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n// //             handleSuccess(result.message);\r\n// //             setShowBlogForm(false);\r\n// //             setEditingBlog(null);\r\n\r\n// //             // Update blogs locally\r\n// //             if (editingBlog) {\r\n// //                 setBlogs((prevBlogs) =>\r\n// //                     prevBlogs.map((blog) => (blog._id === result.blog._id ? result.blog : blog))\r\n// //                 );\r\n// //             } else {\r\n// //                 console.log(result.blog)\r\n// //                 setBlogs((prevBlogs) => [...prevBlogs, result.blog]);\r\n// //             }\r\n// //         } catch (err) {\r\n// //             handleError(err.message);\r\n// //         }\r\n// //     };\r\n\r\n// //     const deleteBlog = async (id) => {\r\n// //         try {\r\n// //             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n// //                 method: 'DELETE',\r\n// //                 headers: { Authorization: localStorage.getItem('token') },\r\n// //             });\r\n\r\n// //             const result = await response.json();\r\n\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n// //             handleSuccess(result.message);\r\n\r\n// //             // Remove the blog locally\r\n// //             setBlogs((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id));\r\n// //         } catch (err) {\r\n// //             handleError(err.message);\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleLogout = () => {\r\n// //         localStorage.removeItem('token');\r\n// //         localStorage.removeItem('loggedInUser');\r\n// //         handleSuccess('User Logged out');\r\n// //         navigate('/login');\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div>\r\n// //             <div className=\"user-section\">\r\n// //                 <h1>Welcome, {loggedInUser}</h1>\r\n// //                 <button onClick={handleLogout}>Logout</button>\r\n// //                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\r\n// //             </div>\r\n\r\n// //             <div className=\"blog-grid\">\r\n// //                 {blogs.map((blog) => (\r\n// //                     <BlogCard\r\n// //                         key={blog._id}\r\n// //                         blog={blog}\r\n// //                         onEdit={() => {\r\n// //                             setEditingBlog(blog);\r\n// //                             setShowBlogForm(true);\r\n// //                         }}\r\n// //                         onDelete={() => deleteBlog(blog._id)}\r\n// //                     />\r\n// //                 ))}\r\n// //             </div>\r\n\r\n// //             {showBlogForm && (\r\n// //                 <BlogForm\r\n// //                     onClose={() => {\r\n// //                         setShowBlogForm(false);\r\n// //                         setEditingBlog(null);\r\n// //                     }}\r\n// //                     onSubmit={addOrUpdateBlog}\r\n// //                     blog={editingBlog}\r\n// //                 />\r\n// //             )}\r\n// //             <ToastContainer />\r\n// //         </div>\r\n// //     );\r\n// // }\r\n\r\n// // export default Home;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import BlogForm from './BlogForm';\r\n// import BlogCard from './BlogCard';\r\n// import { handleSuccess, handleError } from '../utils';\r\n\r\n// function Home() {\r\n//     const [loggedInUser, setLoggedInUser] = useState('');\r\n//     const [blogs, setBlogs] = useState([]);\r\n//     const [showBlogForm, setShowBlogForm] = useState(false);\r\n//     const [editingBlog, setEditingBlog] = useState(null);\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         setLoggedInUser(localStorage.getItem('loggedInUser'));\r\n//         fetchBlogs();\r\n//     }, []);\r\n\r\n//     const fetchBlogs = async () => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n//                 headers: { Authorization: localStorage.getItem('token') },\r\n//             });\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             setBlogs(result);\r\n//         } catch (err) {\r\n//             if (err.message === 'Unauthorized') {\r\n//                 localStorage.removeItem('token');\r\n//                 navigate('/login');\r\n//             } else {\r\n//                 handleError(err.message);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const addOrUpdateBlog = async (formData) => {\r\n//         try {\r\n//             const url = editingBlog\r\n//                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n//                 : `http://localhost:8080/api/blogs/create`;\r\n//             const method = editingBlog ? 'PUT' : 'POST';\r\n\r\n//             const response = await fetch(url, {\r\n//                 method,\r\n//                 headers: {\r\n//                     Authorization: localStorage.getItem('token'),\r\n//                 },\r\n//                 body: formData,\r\n//             });\r\n\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\r\n\r\n//             // Update blogs directly with API response\r\n//             setBlogs(result);\r\n\r\n//             // Reset form state\r\n//             setShowBlogForm(false);\r\n//             setEditingBlog(null);\r\n//         } catch (err) {\r\n//             handleError(err.message);\r\n//         }\r\n//     };\r\n\r\n//     const deleteBlog = async (id) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n//                 method: 'DELETE',\r\n//                 headers: { Authorization: localStorage.getItem('token') },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             handleSuccess('Blog deleted successfully!');\r\n\r\n//             // Update blogs directly with API response\r\n//             setBlogs(result);\r\n//         } catch (err) {\r\n//             handleError(err.message);\r\n//         }\r\n//     };\r\n\r\n//     const handleLogout = () => {\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('loggedInUser');\r\n//         handleSuccess('User Logged out');\r\n//         navigate('/login');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"user-section\">\r\n//                 <h1>Welcome, {loggedInUser}</h1>\r\n//                 <button onClick={handleLogout}>Logout</button>\r\n//                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\r\n//             </div>\r\n\r\n//             <div className=\"blog-grid\">\r\n//                 {blogs.map((blog) => (\r\n//                     <BlogCard\r\n//                         key={blog._id}\r\n//                         blog={blog}\r\n//                         onEdit={() => {\r\n//                             setEditingBlog(blog);\r\n//                             setShowBlogForm(true);\r\n//                         }}\r\n//                         onDelete={() => deleteBlog(blog._id)}\r\n//                     />\r\n//                 ))}\r\n//             </div>\r\n\r\n//             {showBlogForm && (\r\n//                 <BlogForm\r\n//                     onClose={() => {\r\n//                         setShowBlogForm(false);\r\n//                         setEditingBlog(null);\r\n//                     }}\r\n//                     onSubmit={addOrUpdateBlog}\r\n//                     blog={editingBlog}\r\n//                 />\r\n//             )}\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Home;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BlogForm from './BlogForm';\r\nimport BlogCard from './BlogCard';\r\nimport { handleSuccess, handleError } from '../utils';\r\n\r\nfunction Home() {\r\n    const [loggedInUser, setLoggedInUser] = useState('');\r\n    const [blogs, setBlogs] = useState([]);\r\n    const [showBlogForm, setShowBlogForm] = useState(false);\r\n    const [editingBlog, setEditingBlog] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setLoggedInUser(localStorage.getItem('loggedInUser'));\r\n        fetchBlogs();\r\n    }, []);\r\n\r\n    // const fetchBlogs = async () => {\r\n    //     try {\r\n    //         const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n    //             headers: { Authorization: localStorage.getItem('token') },\r\n    //         });\r\n    //         const result = await response.json();\r\n    //         console.log(result);\r\n\r\n    //         if (!result.success || !Array.isArray(result.blogs)) {\r\n    //             throw new Error('Invalid response format: Expected an array of blogs');\r\n    //         }\r\n\r\n    //         setBlogs(result.blogs);\r\n    //     } catch (err) {\r\n    //         if (err.message === 'Unauthorized') {\r\n    //             localStorage.removeItem('token');\r\n    //             navigate('/login');\r\n    //         } else {\r\n    //             handleError(err.message);\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    // const addOrUpdateBlog = async (formData) => {\r\n    //     try {\r\n    //         const url = editingBlog\r\n    //             ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n    //             : `http://localhost:8080/api/blogs/create`;\r\n    //         const method = editingBlog ? 'PUT' : 'POST';\r\n\r\n    //         const response = await fetch(url, {\r\n    //             method,\r\n    //             headers: {\r\n    //                 Authorization: localStorage.getItem('token'),\r\n    //             },\r\n    //             body: formData,\r\n    //         });\r\n\r\n    //         const result = await response.json();\r\n    //         console.log(result);\r\n\r\n    //         if (!result.success || !Array.isArray(result.blogs)) {\r\n    //             throw new Error('Invalid response format: Expected an array of blogs');\r\n    //         }\r\n\r\n    //         handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\r\n\r\n    //         // Update blogs directly with API response\r\n    //         setBlogs(result.blogs);\r\n\r\n    //         // Reset form state\r\n    //         setShowBlogForm(false);\r\n    //         setEditingBlog(null);\r\n    //     } catch (err) {\r\n    //         handleError(err.message);\r\n    //     }\r\n    // };\r\n\r\n    // const deleteBlog = async (id) => {\r\n    //     try {\r\n    //         const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n    //             method: 'DELETE',\r\n    //             headers: { Authorization: localStorage.getItem('token') },\r\n    //         });\r\n\r\n    //         const result = await response.json();\r\n    //         console.log(result);\r\n\r\n    //         if (!result.success || !Array.isArray(result.blogs)) {\r\n    //             throw new Error('Invalid response format: Expected an array of blogs');\r\n    //         }\r\n\r\n    //         handleSuccess('Blog deleted successfully!');\r\n\r\n    //         // Update blogs directly with API response\r\n    //         setBlogs(result.blogs);\r\n    //     } catch (err) {\r\n    //         handleError(err.message);\r\n    //     }\r\n    // };\r\n \r\n    const fetchBlogs = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n                headers: { Authorization: localStorage.getItem('token') },\r\n            });\r\n            const result = await response.json();\r\n            console.log(result);\r\n    \r\n            // Since the API directly returns an array, set it directly to blogs\r\n            if (!Array.isArray(result)) {\r\n                throw new Error('Invalid response format: Expected an array of blogs');\r\n            }\r\n    \r\n            setBlogs(result);\r\n        } catch (err) {\r\n            if (err.message === 'Unauthorized') {\r\n                localStorage.removeItem('token');\r\n                navigate('/login');\r\n            } else {\r\n                handleError(err.message);\r\n            }\r\n        }\r\n    };\r\n    \r\n    const addOrUpdateBlog = async (formData) => {\r\n        try {\r\n            const url = editingBlog\r\n                ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n                : `http://localhost:8080/api/blogs/create`;\r\n            const method = editingBlog ? 'PUT' : 'POST';\r\n    \r\n            const response = await fetch(url, {\r\n                method,\r\n                headers: {\r\n                    Authorization: localStorage.getItem('token'),\r\n                },\r\n                body: formData,\r\n            });\r\n    \r\n            const result = await response.json();\r\n            console.log(result);\r\n    \r\n            // Directly update the blogs list with the new response\r\n            if (!Array.isArray(result)) {\r\n                throw new Error('Invalid response format: Expected an array of blogs');\r\n            }\r\n    \r\n            handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\r\n            setBlogs(result);\r\n    \r\n            // Reset form state\r\n            setShowBlogForm(false);\r\n            setEditingBlog(null);\r\n        } catch (err) {\r\n            handleError(err.message);\r\n        }\r\n    };\r\n    \r\n    const deleteBlog = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n                method: 'DELETE',\r\n                headers: { Authorization: localStorage.getItem('token') },\r\n            });\r\n    \r\n            const result = await response.json();\r\n            console.log(result);\r\n    \r\n            // Directly update the blogs list with the new response\r\n            if (!Array.isArray(result)) {\r\n                throw new Error('Invalid response format: Expected an array of blogs');\r\n            }\r\n    \r\n            handleSuccess('Blog deleted successfully!');\r\n            setBlogs(result);\r\n        } catch (err) {\r\n            handleError(err.message);\r\n        }\r\n    };\r\n    \r\n    const handleLogout = () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('loggedInUser');\r\n        handleSuccess('User Logged out');\r\n        navigate('/login');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"user-section\">\r\n                <h1>Welcome, {loggedInUser}</h1>\r\n                <button onClick={handleLogout}>Logout</button>\r\n                <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\r\n            </div>\r\n\r\n            <div className=\"blog-grid\">\r\n                {blogs.map((blog) => (\r\n                    <BlogCard\r\n                        key={blog._id}\r\n                        blog={blog}\r\n                        onEdit={() => {\r\n                            setEditingBlog(blog);\r\n                            setShowBlogForm(true);\r\n                        }}\r\n                        onDelete={() => deleteBlog(blog._id)}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {showBlogForm && (\r\n                <BlogForm\r\n                    onClose={() => {\r\n                        setShowBlogForm(false);\r\n                        setEditingBlog(null);\r\n                    }}\r\n                    onSubmit={addOrUpdateBlog}\r\n                    blog={editingBlog}\r\n                />\r\n            )}\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}