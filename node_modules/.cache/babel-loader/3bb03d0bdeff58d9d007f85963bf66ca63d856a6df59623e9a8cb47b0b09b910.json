{"ast":null,"code":"// // import React, { useEffect, useState } from 'react';\n// // import { useNavigate } from 'react-router-dom';\n// // import { ToastContainer } from 'react-toastify';\n// // import BlogForm from './BlogForm';\n// // import BlogCard from './BlogCard';\n// // import { handleSuccess, handleError } from '../utils';\n\n// // function Home() {\n// //     const [loggedInUser, setLoggedInUser] = useState('');\n// //     const [blogs, setBlogs] = useState([]);\n// //     const [showBlogForm, setShowBlogForm] = useState(false);\n// //     const [editingBlog, setEditingBlog] = useState(null);\n// //     const navigate = useNavigate();\n\n// //     useEffect(() => {\n// //         setLoggedInUser(localStorage.getItem('loggedInUser'));\n// //         fetchBlogs();\n// //     }, []);\n\n// //     const fetchBlogs = async () => {\n\n// //         try {\n// //             const response = await fetch(`http://localhost:8080/api/blogs`, {\n\n// //                 headers: { Authorization: localStorage.getItem('token') },\n// //             });\n// //             const result = await response.json();\n// //             console.log(result);\n// //             if (!result.success) throw new Error(result.message);\n\n// //             setBlogs(result);\n// //         } catch (err) {\n// //             if (err.message === \"Unauthorized\") {\n// //                 localStorage.removeItem('token');\n// //                 navigate('/login');\n// //             } else {\n// //                 handleError(err.message);\n// //             }\n// //         }\n// //     };\n\n// //     const addOrUpdateBlog = async (formData) => {\n\n// //         try {\n// //             const url = editingBlog\n// //                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\n// //                 : `http://localhost:8080/api/blogs/create`;\n// //             const method = editingBlog ? 'PUT' : 'POST';\n// //             const response = await fetch(url, {\n// //                 method,\n// //                 headers: {\n// //                     Authorization: localStorage.getItem('token'),\n// //                     // 'Content-Type': 'application/json',\n// //                 },\n// //                 body: formData,\n// //             });\n\n// //             const result = await response.json();\n// //              console.log(result)\n\n// //             if (!result.success) throw new Error(result.message);\n\n// //             handleSuccess(result.message);\n// //             setShowBlogForm(false);\n// //             setEditingBlog(null);\n\n// //             // Update blogs locally\n// //             if (editingBlog) {\n// //                 setBlogs((prevBlogs) =>\n// //                     prevBlogs.map((blog) => (blog._id === result.blog._id ? result.blog : blog))\n// //                 );\n// //             } else {\n// //                 console.log(result.blog)\n// //                 setBlogs((prevBlogs) => [...prevBlogs, result.blog]);\n// //             }\n// //         } catch (err) {\n// //             handleError(err.message);\n// //         }\n// //     };\n\n// //     const deleteBlog = async (id) => {\n// //         try {\n// //             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n// //                 method: 'DELETE',\n// //                 headers: { Authorization: localStorage.getItem('token') },\n// //             });\n\n// //             const result = await response.json();\n\n// //             if (!result.success) throw new Error(result.message);\n\n// //             handleSuccess(result.message);\n\n// //             // Remove the blog locally\n// //             setBlogs((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id));\n// //         } catch (err) {\n// //             handleError(err.message);\n// //         }\n// //     };\n\n// //     const handleLogout = () => {\n// //         localStorage.removeItem('token');\n// //         localStorage.removeItem('loggedInUser');\n// //         handleSuccess('User Logged out');\n// //         navigate('/login');\n// //     };\n\n// //     return (\n// //         <div>\n// //             <div className=\"user-section\">\n// //                 <h1>Welcome, {loggedInUser}</h1>\n// //                 <button onClick={handleLogout}>Logout</button>\n// //                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\n// //             </div>\n\n// //             <div className=\"blog-grid\">\n// //                 {blogs.map((blog) => (\n// //                     <BlogCard\n// //                         key={blog._id}\n// //                         blog={blog}\n// //                         onEdit={() => {\n// //                             setEditingBlog(blog);\n// //                             setShowBlogForm(true);\n// //                         }}\n// //                         onDelete={() => deleteBlog(blog._id)}\n// //                     />\n// //                 ))}\n// //             </div>\n\n// //             {showBlogForm && (\n// //                 <BlogForm\n// //                     onClose={() => {\n// //                         setShowBlogForm(false);\n// //                         setEditingBlog(null);\n// //                     }}\n// //                     onSubmit={addOrUpdateBlog}\n// //                     blog={editingBlog}\n// //                 />\n// //             )}\n// //             <ToastContainer />\n// //         </div>\n// //     );\n// // }\n\n// // export default Home;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { ToastContainer } from 'react-toastify';\n// import BlogForm from './BlogForm';\n// import BlogCard from './BlogCard';\n// import { handleSuccess, handleError } from '../utils';\n\n// function Home() {\n//     const [loggedInUser, setLoggedInUser] = useState('');\n//     const [blogs, setBlogs] = useState([]);\n//     const [showBlogForm, setShowBlogForm] = useState(false);\n//     const [editingBlog, setEditingBlog] = useState(null);\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         setLoggedInUser(localStorage.getItem('loggedInUser'));\n//         fetchBlogs();\n//     }, []);\n\n//     const fetchBlogs = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/blogs`, {\n//                 headers: { Authorization: localStorage.getItem('token') },\n//             });\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             setBlogs(result);\n//         } catch (err) {\n//             if (err.message === 'Unauthorized') {\n//                 localStorage.removeItem('token');\n//                 navigate('/login');\n//             } else {\n//                 handleError(err.message);\n//             }\n//         }\n//     };\n\n//     const addOrUpdateBlog = async (formData) => {\n//         try {\n//             const url = editingBlog\n//                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\n//                 : `http://localhost:8080/api/blogs/create`;\n//             const method = editingBlog ? 'PUT' : 'POST';\n\n//             const response = await fetch(url, {\n//                 method,\n//                 headers: {\n//                     Authorization: localStorage.getItem('token'),\n//                 },\n//                 body: formData,\n//             });\n\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\n\n//             // Update blogs directly with API response\n//             setBlogs(result);\n\n//             // Reset form state\n//             setShowBlogForm(false);\n//             setEditingBlog(null);\n//         } catch (err) {\n//             handleError(err.message);\n//         }\n//     };\n\n//     const deleteBlog = async (id) => {\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\n//                 method: 'DELETE',\n//                 headers: { Authorization: localStorage.getItem('token') },\n//             });\n\n//             const result = await response.json();\n//             console.log(result);\n\n//             if (!Array.isArray(result)) {\n//                 throw new Error('Invalid response format: Expected an array');\n//             }\n\n//             handleSuccess('Blog deleted successfully!');\n\n//             // Update blogs directly with API response\n//             setBlogs(result);\n//         } catch (err) {\n//             handleError(err.message);\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('loggedInUser');\n//         handleSuccess('User Logged out');\n//         navigate('/login');\n//     };\n\n//     return (\n//         <div>\n//             <div className=\"user-section\">\n//                 <h1>Welcome, {loggedInUser}</h1>\n//                 <button onClick={handleLogout}>Logout</button>\n//                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\n//             </div>\n\n//             <div className=\"blog-grid\">\n//                 {blogs.map((blog) => (\n//                     <BlogCard\n//                         key={blog._id}\n//                         blog={blog}\n//                         onEdit={() => {\n//                             setEditingBlog(blog);\n//                             setShowBlogForm(true);\n//                         }}\n//                         onDelete={() => deleteBlog(blog._id)}\n//                     />\n//                 ))}\n//             </div>\n\n//             {showBlogForm && (\n//                 <BlogForm\n//                     onClose={() => {\n//                         setShowBlogForm(false);\n//                         setEditingBlog(null);\n//                     }}\n//                     onSubmit={addOrUpdateBlog}\n//                     blog={editingBlog}\n//                 />\n//             )}\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default Home;","map":{"version":3,"names":[],"sources":["C:/Users/WIN-10/OneDrive/Documents/Desktop/expense-frontend/expensetracker/src/pages/Home.js"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\r\n// // import { useNavigate } from 'react-router-dom';\r\n// // import { ToastContainer } from 'react-toastify';\r\n// // import BlogForm from './BlogForm';\r\n// // import BlogCard from './BlogCard';\r\n// // import { handleSuccess, handleError } from '../utils';\r\n\r\n// // function Home() {\r\n// //     const [loggedInUser, setLoggedInUser] = useState('');\r\n// //     const [blogs, setBlogs] = useState([]);\r\n// //     const [showBlogForm, setShowBlogForm] = useState(false);\r\n// //     const [editingBlog, setEditingBlog] = useState(null);\r\n// //     const navigate = useNavigate();\r\n\r\n// //     useEffect(() => {\r\n// //         setLoggedInUser(localStorage.getItem('loggedInUser'));\r\n// //         fetchBlogs();\r\n// //     }, []);\r\n\r\n// //     const fetchBlogs = async () => {\r\n       \r\n// //         try {\r\n// //             const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n             \r\n// //                 headers: { Authorization: localStorage.getItem('token') },\r\n// //             });\r\n// //             const result = await response.json();\r\n// //             console.log(result);\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n        \r\n// //             setBlogs(result);\r\n// //         } catch (err) {\r\n// //             if (err.message === \"Unauthorized\") {\r\n// //                 localStorage.removeItem('token');\r\n// //                 navigate('/login');\r\n// //             } else {\r\n// //                 handleError(err.message);\r\n// //             }\r\n// //         }\r\n// //     };\r\n  \r\n// //     const addOrUpdateBlog = async (formData) => {\r\n       \r\n// //         try {\r\n// //             const url = editingBlog\r\n// //                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n// //                 : `http://localhost:8080/api/blogs/create`;\r\n// //             const method = editingBlog ? 'PUT' : 'POST';\r\n// //             const response = await fetch(url, {\r\n// //                 method,\r\n// //                 headers: {\r\n// //                     Authorization: localStorage.getItem('token'),\r\n// //                     // 'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: formData,\r\n// //             });\r\n           \r\n// //             const result = await response.json();\r\n// //              console.log(result)\r\n\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n// //             handleSuccess(result.message);\r\n// //             setShowBlogForm(false);\r\n// //             setEditingBlog(null);\r\n\r\n// //             // Update blogs locally\r\n// //             if (editingBlog) {\r\n// //                 setBlogs((prevBlogs) =>\r\n// //                     prevBlogs.map((blog) => (blog._id === result.blog._id ? result.blog : blog))\r\n// //                 );\r\n// //             } else {\r\n// //                 console.log(result.blog)\r\n// //                 setBlogs((prevBlogs) => [...prevBlogs, result.blog]);\r\n// //             }\r\n// //         } catch (err) {\r\n// //             handleError(err.message);\r\n// //         }\r\n// //     };\r\n\r\n// //     const deleteBlog = async (id) => {\r\n// //         try {\r\n// //             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n// //                 method: 'DELETE',\r\n// //                 headers: { Authorization: localStorage.getItem('token') },\r\n// //             });\r\n\r\n// //             const result = await response.json();\r\n\r\n// //             if (!result.success) throw new Error(result.message);\r\n\r\n// //             handleSuccess(result.message);\r\n\r\n// //             // Remove the blog locally\r\n// //             setBlogs((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id));\r\n// //         } catch (err) {\r\n// //             handleError(err.message);\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleLogout = () => {\r\n// //         localStorage.removeItem('token');\r\n// //         localStorage.removeItem('loggedInUser');\r\n// //         handleSuccess('User Logged out');\r\n// //         navigate('/login');\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div>\r\n// //             <div className=\"user-section\">\r\n// //                 <h1>Welcome, {loggedInUser}</h1>\r\n// //                 <button onClick={handleLogout}>Logout</button>\r\n// //                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\r\n// //             </div>\r\n\r\n// //             <div className=\"blog-grid\">\r\n// //                 {blogs.map((blog) => (\r\n// //                     <BlogCard\r\n// //                         key={blog._id}\r\n// //                         blog={blog}\r\n// //                         onEdit={() => {\r\n// //                             setEditingBlog(blog);\r\n// //                             setShowBlogForm(true);\r\n// //                         }}\r\n// //                         onDelete={() => deleteBlog(blog._id)}\r\n// //                     />\r\n// //                 ))}\r\n// //             </div>\r\n\r\n// //             {showBlogForm && (\r\n// //                 <BlogForm\r\n// //                     onClose={() => {\r\n// //                         setShowBlogForm(false);\r\n// //                         setEditingBlog(null);\r\n// //                     }}\r\n// //                     onSubmit={addOrUpdateBlog}\r\n// //                     blog={editingBlog}\r\n// //                 />\r\n// //             )}\r\n// //             <ToastContainer />\r\n// //         </div>\r\n// //     );\r\n// // }\r\n\r\n// // export default Home;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import BlogForm from './BlogForm';\r\n// import BlogCard from './BlogCard';\r\n// import { handleSuccess, handleError } from '../utils';\r\n\r\n// function Home() {\r\n//     const [loggedInUser, setLoggedInUser] = useState('');\r\n//     const [blogs, setBlogs] = useState([]);\r\n//     const [showBlogForm, setShowBlogForm] = useState(false);\r\n//     const [editingBlog, setEditingBlog] = useState(null);\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         setLoggedInUser(localStorage.getItem('loggedInUser'));\r\n//         fetchBlogs();\r\n//     }, []);\r\n\r\n//     const fetchBlogs = async () => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/blogs`, {\r\n//                 headers: { Authorization: localStorage.getItem('token') },\r\n//             });\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             setBlogs(result);\r\n//         } catch (err) {\r\n//             if (err.message === 'Unauthorized') {\r\n//                 localStorage.removeItem('token');\r\n//                 navigate('/login');\r\n//             } else {\r\n//                 handleError(err.message);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const addOrUpdateBlog = async (formData) => {\r\n//         try {\r\n//             const url = editingBlog\r\n//                 ? `http://localhost:8080/api/blogs/${editingBlog._id}`\r\n//                 : `http://localhost:8080/api/blogs/create`;\r\n//             const method = editingBlog ? 'PUT' : 'POST';\r\n\r\n//             const response = await fetch(url, {\r\n//                 method,\r\n//                 headers: {\r\n//                     Authorization: localStorage.getItem('token'),\r\n//                 },\r\n//                 body: formData,\r\n//             });\r\n\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             handleSuccess(editingBlog ? 'Blog updated successfully!' : 'Blog created successfully!');\r\n\r\n//             // Update blogs directly with API response\r\n//             setBlogs(result);\r\n\r\n//             // Reset form state\r\n//             setShowBlogForm(false);\r\n//             setEditingBlog(null);\r\n//         } catch (err) {\r\n//             handleError(err.message);\r\n//         }\r\n//     };\r\n\r\n//     const deleteBlog = async (id) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/blogs/${id}`, {\r\n//                 method: 'DELETE',\r\n//                 headers: { Authorization: localStorage.getItem('token') },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n//             console.log(result);\r\n\r\n//             if (!Array.isArray(result)) {\r\n//                 throw new Error('Invalid response format: Expected an array');\r\n//             }\r\n\r\n//             handleSuccess('Blog deleted successfully!');\r\n\r\n//             // Update blogs directly with API response\r\n//             setBlogs(result);\r\n//         } catch (err) {\r\n//             handleError(err.message);\r\n//         }\r\n//     };\r\n\r\n//     const handleLogout = () => {\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('loggedInUser');\r\n//         handleSuccess('User Logged out');\r\n//         navigate('/login');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"user-section\">\r\n//                 <h1>Welcome, {loggedInUser}</h1>\r\n//                 <button onClick={handleLogout}>Logout</button>\r\n//                 <button onClick={() => setShowBlogForm(true)}>Create Blog</button>\r\n//             </div>\r\n\r\n//             <div className=\"blog-grid\">\r\n//                 {blogs.map((blog) => (\r\n//                     <BlogCard\r\n//                         key={blog._id}\r\n//                         blog={blog}\r\n//                         onEdit={() => {\r\n//                             setEditingBlog(blog);\r\n//                             setShowBlogForm(true);\r\n//                         }}\r\n//                         onDelete={() => deleteBlog(blog._id)}\r\n//                     />\r\n//                 ))}\r\n//             </div>\r\n\r\n//             {showBlogForm && (\r\n//                 <BlogForm\r\n//                     onClose={() => {\r\n//                         setShowBlogForm(false);\r\n//                         setEditingBlog(null);\r\n//                     }}\r\n//                     onSubmit={addOrUpdateBlog}\r\n//                     blog={editingBlog}\r\n//                 />\r\n//             )}\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Home;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}